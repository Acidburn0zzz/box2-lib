<?php

namespace Herrera\Box;

use Herrera\Box\Compactor\CompactorInterface;
use Herrera\Box\Exception\FileException;
use Herrera\Box\Exception\InvalidArgumentException;
use Phar;
use SplObjectStorage;

/**
 * Provides additional, complimentary functionality to the Phar class.
 *
 * @author Kevin Herrera <kevin@herrera.io>
 */
class Box
{
    /**
     * The source code compactors.
     *
     * @var SplObjectStorage
     */
    private $compactors;

    /**
     * The Phar instance.
     *
     * @var Phar
     */
    private $phar;

    /**
     * The placeholder values.
     *
     * @var array
     */
    private $values = array();

    /**
     * Sets the Phar instance.
     *
     * @param Phar $phar The instance.
     */
    public function __construct(Phar $phar)
    {
        $this->compactors = new SplObjectStorage();
        $this->phar = $phar;
    }

    /**
     * Adds a file contents compactor.
     *
     * @param CompactorInterface $compactor The compactor.
     */
    public function addCompactor(CompactorInterface $compactor)
    {
        $this->compactors->attach($compactor);
    }

    /**
     * Adds a file to the Phar, after compacting it and replacing its
     * placeholders.
     *
     * @param string $file  The file name.
     * @param string $local The local file name.
     *
     * @throws Exception\Exception
     * @throws FileException If the file could not be used.
     */
    public function addFile($file, $local = null)
    {
        if (null === $local) {
            $local = $file;
        }

        if (false === is_file($file)) {
            throw FileException::create(
                'The file "%s" does not exist or is not a file.',
                $file
            );
        }

        if (false === ($contents = @file_get_contents($file))) {
            throw FileException::lastError();
        }

        $this->addFromString($local, $contents);
    }

    /**
     * Adds the contents from a file to the Phar, after compacting it and
     * replacing its placeholders.
     *
     * @param string $local    The local name.
     * @param string $contents The contents.
     */
    public function addFromString($local, $contents)
    {
        $this->phar->addFromString(
            $local,
            $this->replaceValues($this->compactContents($local, $contents))
        );
    }

    /**
     * Compacts the file contents using the supported compactors.
     *
     * @param string $file     The file name.
     * @param string $contents The file contents.
     *
     * @return string The compacted contents.
     */
    public function compactContents($file, $contents)
    {
        foreach ($this->compactors as $compactor) {
            /** @var $compactor CompactorInterface */
            if ($compactor->supports($file)) {
                $contents = $compactor->compact($contents);
            }
        }

        return $contents;
    }

    /**
     * Generates a bootstrap loader stub.
     *
     * @param string  $alias     The alias to map to.
     * @param string  $file      The script to run.
     * @param boolean $intercept Intercept file functions?
     *
     * @return string The stub.
     *
     * @throws Exception\Exception
     * @throws InvalidArgumentException If the script does not exist inside
     *                                  the phar.
     */
    public function generateStub(
        $alias = null,
        $file = null,
        $intercept = false
    ){
        $stub = <<<STUB
#!/usr/bin/env php
<?php

/**
 * Generated by Box.
 *
 * @link http://github.com/herrera-io/php-box/
 */

STUB;

        if ($alias) {
            $stub .= <<<STUB
Phar::mapPhar('{$alias}');

STUB;
        }

        if ($intercept) {
            $stub .= <<<STUB
Phar::interceptFileFuncs();

STUB;
        }

        if ($file) {
            if (false === isset($this->phar[$file])) {
                throw InvalidArgumentException::create(
                    'The file "%s" does not exist inside the Phar.',
                    $file
                );
            }

            $stub .= <<<STUB
require 'phar://' . __FILE__ . '/{$file}';

STUB;
        }

        $stub .= "__HALT_COMPILER();";

        return $stub;
    }

    /**
     * Returns the Phar instance.
     *
     * @return Phar The instance.
     */
    public function getPhar()
    {
        return $this->phar;
    }

    /**
     * Replaces the placeholders with their values.
     *
     * @param string $contents The contents.
     *
     * @return string The replaced contents.
     */
    public function replaceValues($contents)
    {
        return str_replace(
            array_keys($this->values),
            array_values($this->values),
            $contents
        );
    }

    /**
     * Sets the bootstrap loader stub using a file.
     *
     * @param string  $file    The file path.
     * @param boolean $replace Replace placeholders?
     *
     * @throws Exception\Exception
     * @throws FileException If the stub file could not be used.
     */
    public function setStubUsingFile($file, $replace = false)
    {
        if (false === is_file($file)) {
            throw FileException::create(
                'The file "%s" does not exist or is not a file.',
                $file
            );
        }

        if (false === ($contents = @file_get_contents($file))) {
            throw FileException::lastError();
        }

        if ($replace) {
            $contents = $this->replaceValues($contents);
        }

        $this->phar->setStub($contents);
    }

    /**
     * Sets the placeholder values.
     *
     * @param array $values The values.
     *
     * @throws Exception\Exception
     * @throws InvalidArgumentException If a non-scalar value is used.
     */
    public function setValues(array $values)
    {
        foreach ($values as $key => $value) {
            if (false === is_scalar($value)) {
                throw InvalidArgumentException::create(
                    'Non-scalar values (such as %s) are not supported.',
                    gettype($value)
                );
            }
        }

        $this->values = $values;
    }
}